"use strict";(self.webpackChunkdatavines_website=self.webpackChunkdatavines_website||[]).push([[4039],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=a.createContext({}),d=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(r),k=o,m=u["".concat(c,".").concat(k)]||u[k]||p[k]||n;return r?a.createElement(m,i(i({ref:t},s),{},{components:r})):a.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,i=new Array(n);i[0]=k;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<n;d++)i[d]=r[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}k.displayName="MDXCreateElement"},4001:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var a=r(7462),o=(r(7294),r(3905));const n={id:"build-docker-image",title:"Build Docker Image"},i=void 0,l={unversionedId:"get-started/docker/build-docker-image",id:"get-started/docker/build-docker-image",title:"Build Docker Image",description:"Build Docker Image",source:"@site/docs/02-get-started/02-docker/01-build-docker-image.md",sourceDirName:"02-get-started/02-docker",slug:"/get-started/docker/build-docker-image",permalink:"/datavines-website/en/docs/get-started/docker/build-docker-image",draft:!1,editUrl:"https://github.com/datavane/datavines-website/edit/dev/docs/02-get-started/02-docker/01-build-docker-image.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"build-docker-image",title:"Build Docker Image"},sidebar:"tutorialSidebar",previous:{title:"Deploy From Source",permalink:"/datavines-website/en/docs/get-started/deploy-from-source"},next:{title:"Run Docker Image",permalink:"/datavines-website/en/docs/get-started/docker/deploy-docker-image"}},c={},d=[{value:"Build Docker Image",id:"build-docker-image",level:2},{value:"Prepare Dockerfile",id:"prepare-dockerfile",level:2},{value:"Build Steps",id:"build-steps",level:3},{value:"Push images to DockerHub or private warehouse",id:"push-images-to-dockerhub-or-private-warehouse",level:2}],s={toc:d};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"build-docker-image"},"Build Docker Image"),(0,o.kt)("p",null,"This document mainly introduces how to use Dockerfile to create a running image of DataVines, so that a DataVines Image can be quickly pulled to complete cluster creation in containerized orchestration tools or rapid testing processes."),(0,o.kt)("h2",{id:"prepare-dockerfile"},"Prepare Dockerfile"),(0,o.kt)("p",null,"The following points should be noted when writing Dockerfile:"),(0,o.kt)("blockquote",null,(0,o.kt)("ol",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ol"},"The basic parent image uses the official OpenJDK image certified by Docker Hub, with JDK version 1.8 used."),(0,o.kt)("li",{parentName:"ol"},"The binary packages required for the application need to be packaged by oneself. Please refer to the ",(0,o.kt)("a",{parentName:"li",href:"/datavines-website/en/docs/get-started/deploy-from-source"},"Deploy with Source Code")),(0,o.kt)("li",{parentName:"ol"},"When starting an application within Docker, use ",(0,o.kt)("inlineCode",{parentName:"li"},"start_container")," parameter"),(0,o.kt)("li",{parentName:"ol"},"The construction platform should be consistent with the operation platform."))),(0,o.kt)("h3",{id:"build-steps"},"Build Steps"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Write a Dockerfile file, which can be referenced as follows ",(0,o.kt)("a",{parentName:"li",href:"https://raw.githubusercontent.com/datavane/datavines/dev/deploy/docker/Dockerfile"},"Dockerfile"),",Can be downloaded through wget\u3002"),(0,o.kt)("li",{parentName:"ul"},"Copy the packaged binary package to the directory where Dockerfile is located\u3002"),(0,o.kt)("li",{parentName:"ul"},"Verify the consistency of binary package names in Dockerfile files\u3002"),(0,o.kt)("li",{parentName:"ul"},"Pack and pack using the following command")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker build -t datavines:dev .\n")),(0,o.kt)("h2",{id:"push-images-to-dockerhub-or-private-warehouse"},"Push images to DockerHub or private warehouse"),(0,o.kt)("p",null,"Login to DockerHub account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker login -u <username> <hubaddress>\n")),(0,o.kt)("p",null,"Successful login will prompt a Success related prompt."),(0,o.kt)("p",null,"change the image tag"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker tag datavines:dev <hubaddress>/<namespace>/datavines:dev\n")),(0,o.kt)("p",null,"push image to DockerHub"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker push <hubaddress>/<namespace>/datavines:dev\n")))}u.isMDXComponent=!0}}]);